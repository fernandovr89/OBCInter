from rsf.proj import *
from rsf.recipes import fdmod
import ast

## Building velocity model for OBC dataset
xmax = 6.0
zmax = 2.0
wbz = 0.1 ## water-bottom depth
layers = ((wbz,wbz,wbz,wbz),
          (0.35,0.35,0.35,0.35),
          (0.95,0.95,0.65,0.65),
          (1.90,1.90,1.90,1.90))

velocities = (1.500,
              1.800,
              2.000,
              2.500,
              4.500)
def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

vstr = arr2str(velocities,',')

n1 = len(layers[0])
n2 = len(layers)

Flow('layers.asc',None,
     '''
     echo %s
     n1=%d n2=%d o1=0 d1=%g
     data_format=ascii_float in=$TARGET     
     ''' % (string.join(map(arr2str,layers),' '),
            n1,n2,xmax/(n1-1)))
Flow('layers','layers.asc','dd form=native')

d = 0.0075 # non-round for reproducibility
nx = int(1.5+xmax/d)
nz = int(1.5+zmax/d)
Flow('refs','layers',
     '$RSFROOT/bin/sfspline o1=0 d1=%g n1=%d' % (d,nx))
Flow('dips','refs','deriv scale=y')

Flow('mod1','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,vstr))

# ------------------------------------------------------------
# Model parameters: nt (number of samples) and 
# dt (sample interval) 
par1 = dict( 
    nx=eval('%g'%(nx)), ox=0.0 ,dx=eval('%g'%(d)), lx='x',ux='km',
    nz=eval('%g'%(nz)), oz=0.0, dz=eval('%g'%(d)), lz='z',uz='km',
    nt=10001,ot=0.0, dt=0.00025, lt='t',ut='s',
    pclip=99.0,
    ratio=1.0,
    jsnap=5000,
    kt=800,
    nb=50,
    drsmpt=50
    )

# ------------------------------------------------------------
# set plotting parameters
fdmod.param(par1)
# ------------------------------------------------------------

Plot  ('mod1',fdmod.cgrey('mean=y',par1))

ns=101
ds=0.02
rz0 = wbz
## ------------------------------------------------------------
# horizontal receiver array  
fdmod.horizontal('tH',rz0,par1)
par1['jrH']=3   # jump (grid points)
par1['orH']=1.5 # origin
par1['nrH']=150   # number

# window array
Flow('rH','tH',
  'window j2=%d min2=%g n2=%d'%
  (par1['jrH'],  # jump
   par1['orH'],  # origin
   par1['nrH'])) # number
    
# plot array
Plot(  'rH',fdmod.rrplot('',par1))
    
## make the density
Flow('dens','mod1','$RSFROOT/bin/sfmath output=1')
Plot('dens',fdmod.cgrey('mean=y',par1))

## ------------------------------------------------------------
## make stratigraphic velocity
Flow('vstr','mod1',
     'window | smooth rect1=5 rect2=5 repeat=2')

Plot('vstr',fdmod.cgrey('mean=y',par1))
#
## ------------------------------------------------------------
# construct wavelet
fdmod.wavelet('wav_',30,par1) 

# transpose wavelet
Flow(  'wav','wav_','transp')      

# plot wavelet
Result('wav','window n2=4000 |'
       + fdmod.waveplot('',par1)) 


## ------------------------------------------------------------

#for si in range(ns): ## Uncomment this line for complete array of sources
for si in [50]:  ## Uncomment this line for just central source (run as test)

  stag='%03d'%si ## in a for loop every output file need a different name
#
# ------------------------------------------------------------
# source coordinates (exploding reflectors)
  fdmod.boxarray('ss'+stag,
                 1,   # vertical number
                 0.02,   # vertical origin 
                 0.02, # vertical sampling
                 2,  # horizontal number
                 2.0+ds*si,  # horizontal origin
                 0.01, # horizontal sampling
                 par1)
# ------------------------------------------------------------
## run FD modeling
  fdmod.awefd1('tmpA'+stag,  # data file (all receivers)
               'wfld'+stag,  # wavefield snapshots
               'wav',   # source wavelet
               'vstr',  # velocity
               'dens',  # density
               'ss'+stag,    # source coordinates
               'rH',    # receiver coordinates
               'fsrf=n',# optional flags
               par1)
# Create movie
## ------------------------------------------------------------
#par1['nfrm']=int((par1['nt']-1)/par1['jsnap'])
#for i in range(par1['nfrm']):
#    tag = '-%02d'%i
#    # plot wavefield frames
#    fdmod.wframe('wfld'+tag,
#                 'wfld',i,'pclip=99',par1)
#    Plot(  'wovl'+tag,['wfld'+tag,'ss','rH'],
#           'Overlay')
#    Result('wfld'+tag,['wfld'+tag,'ss','rH'],
#           'Overlay')
#Result('wfld',
#       ['wovl-%02d'%i for i in range(par1['nfrm'])],
#       'Movie')
    
## ------------------------------------------------------------
## remove the wavelet delay and resample
  Flow('datA'+stag,'tmpA'+stag,
       '''
       window squeeze=n f2=%(kt)d j2=%(drsmpt)d  |
       pad end2=%(kt)d |
       put o2=%(ot)g
       ''' %par1)
#  Flow(None,'tmpA'+stag,'rm $SOURCE ',stdin=0)

#
## ------------------------------------------------------------
## window data from the horizontal array
  Flow('datH'+stag,'datA'+stag,
       '''
       window squeeze=n n1=%d |
       put o1=%g d1=%g
       '''%(par1['nrH'],
            par1['orH'],
          par1['jrH']*par1['dx'])) 
  Result('datH'+stag,'window | transp|'
         + fdmod.dgrey('pclip=99'%par1,par1))
  
### ENDFOR { for si in range(ns):}

# run FD migration
#fdmod.zom('imgH',  # image
#  'datH',  # data
#  'vstr',   # velocity
#  'dens',   # density
#  'rH',    # receiver coordinates
#  'fsrf=n', # optional flags
#  par1)
    
#    # plot image
#Plot(  'imgH','bandpass flo=2 |'
#  + fdmod.cgrey('pclip=99',par1))
    
#    # overlay sources and receivers
#Result('imgH',['imgH','ss','rH'],'Overlay')
    
## ------------------------------------------------------------

End()

