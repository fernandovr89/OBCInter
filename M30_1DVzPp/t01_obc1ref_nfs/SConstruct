from rsf.proj import *
from rsf.recipes import fdmod
from math import *
import ast
from numpy import *

kilo = 1000
xmax = 12.0*kilo
zmax = 2.0*kilo
wbz = 0.10*kilo
layers = ((wbz,wbz,wbz,wbz),
          (0.35*kilo,0.35*kilo,0.35*kilo,0.35*kilo),
          (0.55*kilo,0.55*kilo,0.55*kilo,0.55*kilo),
          (0.85*kilo,0.85*kilo,0.85*kilo,0.85*kilo),
          (0.95*kilo,0.95*kilo,0.95*kilo,0.95*kilo),
          (1.25*kilo,1.25*kilo,1.25*kilo,1.25*kilo),
          (1.90*kilo,1.90*kilo,1.90*kilo,1.90*kilo))

velocities = (1.500*kilo,
              1.800*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo,
              4.500*kilo)
densities = (1.000*kilo,
              2.000*kilo,
              2.100*kilo,
              2.100*kilo,
              2.100*kilo,
              2.100*kilo,
              2.100*kilo,
              2.100*kilo)
velocities_wb = (1.500*kilo,
              1.800*kilo,
              1.800*kilo,
              1.800*kilo,
              1.800*kilo,
              1.800*kilo,
              1.800*kilo)
densities_wb = (1.000*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo)
finame = ''
fband = [] 
def fband_dcomp(finame=finame, fband=fband):
  foname_fbi = []
  foname =finame+'fbandpass'
  for fbi in range(len(fband[1:])):
    fbi_tag = '%02d'%fbi
    foname_tmp = finame+'fbandpass'+fbi_tag
    Flow(foname_tmp,finame,
       '''
       $RSFROOT/bin/sfbandpass fhi=%g flo=%g 
       '''%(fband[fbi+1],fband[fbi]))
    foname_fbi.append(foname_tmp)

  Flow(foname,foname_fbi,
       '''
       cat ${SOURCES[1:%d]} | put label3='Freq band'
       '''%(len(foname_fbi)) )
  return foname
##########################################################
##nt = 100
##wdw_xn = 100
##wdw_x0 = 75
##wdw_tn = nt
##wdw_t0 = 10

nt = 300
wdw_xn = 300
wdw_x0 = 0
wdw_tn = nt
wdw_t0 = 0

def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

vstr = arr2str(velocities,',')
dstr = arr2str(densities,',')
vstr_wb = arr2str(velocities_wb,',')
dstr_wb = arr2str(densities_wb,',')

n1 = len(layers[0])
n2 = len(layers)

Flow('layers.asc',None,
     '''
     echo %s
     n1=%d n2=%d o1=0 d1=%g
     data_format=ascii_float in=$TARGET     
     ''' % (string.join(map(arr2str,layers),' '),
            n1,n2,xmax/(n1-1)))
Flow('layers','layers.asc','dd form=native')

d = 0.0075*kilo # non-round for reproducibility
nx = int(1.5+xmax/d)
nz = int(1.5+zmax/d)
Flow('refs','layers',
     '$RSFROOT/bin/sfspline o1=0 d1=%g n1=%d' % (d,nx))
Flow('dips','refs','deriv scale=y')

Flow('vpmod','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,vstr))
Flow('vpmod_wb','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,vstr_wb))

Flow('rhomod','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,dstr))
Flow('rhomod_wb','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,dstr_wb))

# rho [g/cm^3] , vel [km/s], 
Flow('blkmod','vpmod rhomod',
     '''
     math rho=${SOURCES[1]} output='rho*((input)^2)'
     ''')
Flow('blkmod_wb','vpmod_wb rhomod_wb',
     '''
     math rho=${SOURCES[1]} output='rho*((input)^2)'
     ''')

# ------------------------------------------------------------
par = dict( 
    nx=eval('%g'%(nx)), ox=0.0 ,dx=eval('%g'%(d)), lx='x',ux='m',
    nz=eval('%g'%(nz)), oz=0.0, dz=eval('%g'%(d)), lz='z',uz='m',
    nt=15001,ot=0.0, dt=0.0001, lt='t',ut='s',
    pclip=99.0,
    ratio=1.0,
    jsnap=500,
    kt=800,
    nb=50,
    drsmpt=50
    )

# ------------------------------------------------------------
# set plotting parameters
fdmod.param(par)
# ------------------------------------------------------------

#Plot  ('vpmod',fdmod.cgrey('mean=y',par))
#Result('mod',fdmod.cgrey('mean=y',par))

ns = 151
nr = 301
ds = 0.02*kilo
dr_grid = 3
rx0 = 3.0*kilo 
rz0 = wbz
sx0 = 4.5*kilo
sz0 = 0.000*kilo
sz = sz0
rz = rz0

fdmod.horizontal('rr_all',rz,par)


## ------------------------------------------------------------
# horizontal array @ z=1.5km
##fdmod.horizontal('tH',rz0,par)
par['jrH']=dr_grid   # jump (grid points)
par['orH']=rx0 # origin
par['nrH']=nr   # number
##
### window array
Flow('rr','rr_all',
  'window j2=%d min2=%g n2=%d'%
  (par['jrH'],  # jump
   par['orH'],  # origin
   par['nrH'])) # number
##    
##    # plot array
##Plot(  'rH',fdmod.rrplot('',par))
##    
##
## ------------------------------------------------------------
## make smooth velocity
#Flow('vsmo','modl',
#     'smooth rect1=25 rect2=25 repeat=3')
## ------------------------------------------------------------

# construct wavelet
fdmod.wavelet('wav_',30,par) 

# transpose wavelet
Flow(  'wav','wav_','put n2=1 n3=1 | transp plane=13 | pad end2=2')      


# plot wavelet
#Result('wav','window n2=4000 |'
#       + fdmod.waveplot('',par)) 


## ------------------------------------------------------------


#for si in range(ns):
for si in [75]:
####
  stag='%03d'%si
  sx = sx0 + si*ds
  fdmod.point('ss_'+stag,sx,sz,par)
  Flow('ss'+stag,'ss_'+stag,'put n2=1')

  Flow('Fdat'+stag+' Fwfl'+stag,'wav blkmod rhomod ss'+stag+' rr',
      '''
      awesgvxvzpp bulk=${SOURCES[1]} den=${SOURCES[2]} sou=${SOURCES[3]} 
      rec=${SOURCES[4]} wfl=${TARGETS[1]} free=y nb=100 jsnap=%d snap=y abc=y
      '''%(par['jsnap']))
  Flow('Fdat_nonb'+stag+' Fwfl_nonb'+stag,'wav blkmod rhomod ss'+stag+' rr',
      '''
      awesgvxvzpp bulk=${SOURCES[1]} den=${SOURCES[2]} sou=${SOURCES[3]} 
      rec=${SOURCES[4]} wfl=${TARGETS[1]} free=y jsnap=%d snap=y
      '''%(par['jsnap']))

  Flow('Fdat_nfs'+stag+' Fwfl_nfs'+stag,'wav blkmod rhomod ss'+stag+' rr',
      '''
      awesgvxvzpp bulk=${SOURCES[1]} den=${SOURCES[2]} sou=${SOURCES[3]} 
      rec=${SOURCES[4]} wfl=${TARGETS[1]} free=n nb=100 jsnap=%d snap=y abc=y 
      '''%(par['jsnap']))

##  Flow('Fdat_wb'+stag+' Fwfl_wb'+stag,'wav blkmod_wb rhomod_wb ss'+stag+' rr',
##      '''
##      awesgvxvzpp bulk=${SOURCES[1]} den=${SOURCES[2]} sou=${SOURCES[3]} 
##      rec=${SOURCES[4]} wfl=${TARGETS[1]} free=y nb=50
##      ''')

#### window data from the horizontal array
  Flow('datH'+stag,'Fdat'+stag,
       '''
       pad end3=%d |
       window squeeze=n n1=%d f3=%d j3=%d  |
       put o3=%g o1=%g d1=%g  | transp plane=13 | transp plane=23
       '''%(par['kt'],par['nrH'],par['kt'], par['drsmpt'],par['ot'],
            par['orH'], par['jrH']*par['dx']))
  Flow('datH_nonb'+stag,'Fdat_nonb'+stag,
       '''
       pad end3=%d |
       window squeeze=n n1=%d f3=%d j3=%d  |
       put o3=%g o1=%g d1=%g  | transp plane=13 | transp plane=23
       '''%(par['kt'],par['nrH'],par['kt'], par['drsmpt'],par['ot'],
            par['orH'], par['jrH']*par['dx']))

##  Flow('datH_wb'+stag,'Fdat_wb'+stag,
##       '''
##       pad end3=%d |
##       window squeeze=n n1=%d f3=%d j3=%d  |
##       put o3=%g o1=%g d1=%g  | transp plane=13 | transp plane=23
##       '''%(par['kt'],par['nrH'],par['kt'], par['drsmpt'],par['ot'],
##            par['orH'], par['jrH']*par['dx']))
  Flow('datH_nfs'+stag,'Fdat_nfs'+stag,
       '''
       pad end3=%d |
       window squeeze=n n1=%d f3=%d j3=%d  |
       put o3=%g o1=%g d1=%g  | transp plane=13 | transp plane=23
       '''%(par['kt'],par['nrH'],par['kt'], par['drsmpt'],par['ot'],
            par['orH'], par['jrH']*par['dx']))

##  Result('datH'+stag,'window j2=4 | transp|'
##         + fdmod.dgrey('pclip=92'%par,par))


##  Flow('datPP'+stag,'datH'+stag,
##      '''
##      window n3=1 f3=0
##      ''')
##  Flow('datPP_wb'+stag,'datH_wb'+stag,
##      '''
##      window n3=1 f3=0
##      ''')
##  Flow('datPP_nfs'+stag,'datH_nfs'+stag,
##      '''
##      window n3=1 f3=0
##      ''')
##  
##  Flow('datVZ'+stag,'datH'+stag,
##      '''
##      window n3=1 f3=1
##      ''')
##  Flow('datVZ_wb'+stag,'datH_wb'+stag,
##      '''
##      window n3=1 f3=1
##      ''')
##  Flow('datVZ_nfs'+stag,'datH_nfs'+stag,
##      '''
##      window n3=1 f3=1
##      ''')
##  
##  Flow('datVZ_wdw'+stag,'datVZ'+stag+' datVZ_wb'+stag,
##       '''
##       add scale=1.0,-1.0 ${SOURCES[1]} | window n2=%d f2=%d n1=%d f1=%d | costaper nw2=10 nw1=10 
##       '''%(wdw_xn, wdw_x0, wdw_tn, wdw_t0))
##  Flow('datPP_wdw'+stag,'datPP'+stag+' datPP_wb'+stag,
##       '''
##        add scale=1.0,-1.0 ${SOURCES[1]} | window n2=%d f2=%d n1=%d f1=%d | costaper nw1=10 nw2=10
##       '''%(wdw_xn, wdw_x0, wdw_tn, wdw_t0))
##  Flow('datVZ_bpass_wdw'+stag,'datVZ_wdw'+stag,
##        '''
##        $RSFROOT/bin/sfbandpass fhi=60 flo=0.5 
##        ''')
##  Flow('datPP_bpass_wdw'+stag,'datPP_wdw'+stag,
##        '''
##        $RSFROOT/bin/sfbandpass fhi=60 flo=0.5 
##        ''')
##  
##  eps_ratPPVZ = .0001
  

End()
