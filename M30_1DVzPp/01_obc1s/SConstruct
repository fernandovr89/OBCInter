from rsf.proj import *
from rsf.recipes import fdmod
import ast

kilo = 1000
xmax = 6.0*kilo
zmax = 2.0*kilo
wbz = 0.3*kilo
layers = ((wbz,wbz,wbz,wbz),
          (0.45*kilo,0.45*kilo,0.45*kilo,0.45*kilo),
          (1.90*kilo,1.90*kilo,1.90*kilo,1.90*kilo))

velocities = (1.500*kilo,
              1.800*kilo,
              2.000*kilo,
              4.500*kilo)
densities = (1.000*kilo,
              2.100*kilo,
              2.100*kilo,
              2.000*kilo)

def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

vstr = arr2str(velocities,',')
dstr = arr2str(densities,',')

n1 = len(layers[0])
n2 = len(layers)

Flow('layers.asc',None,
     '''
     echo %s
     n1=%d n2=%d o1=0 d1=%g
     data_format=ascii_float in=$TARGET     
     ''' % (string.join(map(arr2str,layers),' '),
            n1,n2,xmax/(n1-1)))
Flow('layers','layers.asc','dd form=native')

d = 0.0075*kilo # non-round for reproducibility
nx = int(1.5+xmax/d)
nz = int(1.5+zmax/d)
Flow('refs','layers',
     '$RSFROOT/bin/sfspline o1=0 d1=%g n1=%d' % (d,nx))
Flow('dips','refs','deriv scale=y')

Flow('vpmod','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,vstr))
Flow('rhomod','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,dstr))

# rho [g/cm^3] , vel [km/s], 
Flow('blkmod','vpmod rhomod',
     '''
     math rho=${SOURCES[1]} output=rho*((input)^2)
     ''')

# ------------------------------------------------------------
par = dict( 
    nx=eval('%g'%(nx)), ox=0.0 ,dx=eval('%g'%(d)), lx='x',ux='km',
    nz=eval('%g'%(nz)), oz=0.0, dz=eval('%g'%(d)), lz='z',uz='km',
    nt=5001,ot=0.0, dt=0.0001, lt='t',ut='s',
    pclip=99.0,
    ratio=1.0,
    jsnap=5000,
    kt=800,
    nb=50,
    drsmpt=50
    )

# ------------------------------------------------------------
# set plotting parameters
fdmod.param(par)
# ------------------------------------------------------------

Plot  ('vpmod',fdmod.cgrey('mean=y',par))
#Result('mod',fdmod.cgrey('mean=y',par))

ns=151
ds=0.02*kilo
rz0 = wbz
## ------------------------------------------------------------
# horizontal array @ z=1.5km
##fdmod.horizontal('tH',rz0,par)
##par['jrH']=3   # jump (grid points)
##par['orH']=3.0 # origin
##par['nrH']=300   # number
##
### window array
##Flow('rH','tH',
##  'window j2=%d min2=%g n2=%d'%
##  (par['jrH'],  # jump
##   par['orH'],  # origin
##   par['nrH'])) # number
##    
##    # plot array
##Plot(  'rH',fdmod.rrplot('',par))
##    
##
## ------------------------------------------------------------
## make smooth velocity
#Flow('vsmo','modl',
#     'smooth rect1=25 rect2=25 repeat=3')
## ------------------------------------------------------------

# construct wavelet
fdmod.wavelet('wav_',30,par) 

# transpose wavelet
Flow(  'wav','wav_','transp')      

# plot wavelet
Result('wav','window n2=4000 |'
       + fdmod.waveplot('',par)) 


## ------------------------------------------------------------

#for si in range(ns):
##for si in [75]:
##
##  stag='%03d'%si
###
### ------------------------------------------------------------
### source coordinates (exploding reflectors)
##  fdmod.boxarray('ss'+stag,
##                 1,   # vertical number
##                 0.02,   # vertical origin 
##                 0.02, # vertical sampling
##                 2,  # horizontal number
##                 1.5+ds*si,  # horizontal origin
##                 0.01, # horizontal sampling
##                 par)
###  Plot(  'ss',fdmod.ssplot('',par))
###Result('ss',['mod','ss'],'Overlay')
##
##
### ------------------------------------------------------------
#### run FD modeling
##  fdmod.awefd1('tmpA'+stag,  # data file (all receivers)
##               'wfld'+stag,  # wavefield snapshots
##               'wav',   # source wavelet
##               'vstr',  # velocity
##               'dens',  # density
##               'ss'+stag,    # source coordinates
##               'rH',    # receiver coordinates
##               'fsrf=y',# optional flags
##               par)
###
#### ------------------------------------------------------------
###par['nfrm']=int((par['nt']-1)/par['jsnap'])
###for i in range(par['nfrm']):
###    tag = '-%02d'%i
###    # plot wavefield frames
###    fdmod.wframe('wfld'+tag,
###                 'wfld',i,'pclip=99',par)
###    Plot(  'wovl'+tag,['wfld'+tag,'ss','rH'],
###           'Overlay')
###    Result('wfld'+tag,['wfld'+tag,'ss','rH'],
###           'Overlay')
###Result('wfld',
###       ['wovl-%02d'%i for i in range(par['nfrm'])],
###       'Movie')
##    
#### ------------------------------------------------------------
#### remove the wavelet delay and resample
##  Flow('datA'+stag,'tmpA'+stag,
##       '''
##       window squeeze=n f2=%(kt)d j2=%(drsmpt)d  |
##       pad end2=%(kt)d |
##       put o2=%(ot)g
##       ''' %par)
###  Flow(None,'tmpA'+stag,'rm $SOURCE ',stdin=0)
##
###
#### ------------------------------------------------------------
#### window data from the horizontal array
##  Flow('datH'+stag,'datA'+stag,
##       '''
##       window squeeze=n n1=%d |
##       put o1=%g d1=%g
##       '''%(par['nrH'],
##            par['orH'],
##          par['jrH']*par['dx'])) 
##  Result('datH'+stag,'window j2=4 | transp|'
##         + fdmod.dgrey('pclip=92'%par,par))
##  
##### ENDFOR { for si in range(ns):}

#Result('wigH','datH','window j2=4 | transp|'
#       + fdmod.dwigl('pclip=98'%par,par))
#
# run FD migration
#fdmod.zom('imgH',  # image
#  'datH',  # data
#  'vstr',   # velocity
#  'dens',   # density
#  'rH',    # receiver coordinates
#  'fsrf=n', # optional flags
#  par)
    
#    # plot image
#Plot(  'imgH','bandpass flo=2 |'
#  + fdmod.cgrey('pclip=99',par))
    
#    # overlay sources and receivers
#Result('imgH',['imgH','ss','rH'],'Overlay')
    
## ------------------------------------------------------------
End()
