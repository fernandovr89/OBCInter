from rsf.proj import *
from rsf.recipes import fdmod
import ast
from numpy import *

kilo = 1000
xmax = 12.0*kilo
zmax = 2.0*kilo
wbz = 0.3*kilo
layers = ((wbz,wbz,wbz,wbz),
          (0.45*kilo,0.45*kilo,0.45*kilo,0.45*kilo),
          (1.90*kilo,1.90*kilo,1.90*kilo,1.90*kilo))

velocities = (1.500*kilo,
              1.800*kilo,
              2.000*kilo,
              4.500*kilo)
densities = (1.000*kilo,
              2.100*kilo,
              2.100*kilo,
              2.000*kilo)

def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

vstr = arr2str(velocities,',')
dstr = arr2str(densities,',')

n1 = len(layers[0])
n2 = len(layers)

Flow('layers.asc',None,
     '''
     echo %s
     n1=%d n2=%d o1=0 d1=%g
     data_format=ascii_float in=$TARGET     
     ''' % (string.join(map(arr2str,layers),' '),
            n1,n2,xmax/(n1-1)))
Flow('layers','layers.asc','dd form=native')

d = 0.0075*kilo # non-round for reproducibility
nx = int(1.5+xmax/d)
nz = int(1.5+zmax/d)
Flow('refs','layers',
     '$RSFROOT/bin/sfspline o1=0 d1=%g n1=%d' % (d,nx))
Flow('dips','refs','deriv scale=y')

Flow('vpmod','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,vstr))
Flow('rhomod','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,dstr))

# rho [g/cm^3] , vel [km/s], 
Flow('blkmod','vpmod rhomod',
     '''
     math rho=${SOURCES[1]} output='rho*((input)^2)'
     ''')

# ------------------------------------------------------------
par = dict( 
    nx=eval('%g'%(nx)), ox=0.0 ,dx=eval('%g'%(d)), lx='x',ux='m',
    nz=eval('%g'%(nz)), oz=0.0, dz=eval('%g'%(d)), lz='z',uz='m',
    nt=20001,ot=0.0, dt=0.0001, lt='t',ut='s',
    pclip=99.0,
    ratio=1.0,
    jsnap=5000,
    kt=800,
    nb=50,
    drsmpt=50
    )

# ------------------------------------------------------------
# set plotting parameters
fdmod.param(par)
# ------------------------------------------------------------

#Plot  ('vpmod',fdmod.cgrey('mean=y',par))
#Result('mod',fdmod.cgrey('mean=y',par))

ns = 151
nr = 301
ds = 0.02*kilo
dr_grid = 3
rx0 = 3.0*kilo 
rz0 = wbz
sx0 = 4.5*kilo
sz0 = 0.02*kilo
sz = sz0
rz = rz0

fdmod.horizontal('rr_all',rz,par)


## ------------------------------------------------------------
# horizontal array @ z=1.5km
##fdmod.horizontal('tH',rz0,par)
par['jrH']=dr_grid   # jump (grid points)
par['orH']=rx0 # origin
par['nrH']=nr   # number
##
### window array
Flow('rr','rr_all',
  'window j2=%d min2=%g n2=%d'%
  (par['jrH'],  # jump
   par['orH'],  # origin
   par['nrH'])) # number
##    
##    # plot array
##Plot(  'rH',fdmod.rrplot('',par))
##    
##
## ------------------------------------------------------------
## make smooth velocity
#Flow('vsmo','modl',
#     'smooth rect1=25 rect2=25 repeat=3')
## ------------------------------------------------------------

# construct wavelet
fdmod.wavelet('wav_',30,par) 

# transpose wavelet
Flow(  'wav','wav_','put n2=1 n3=1 | transp plane=13 | pad end2=2')      


# plot wavelet
#Result('wav','window n2=4000 |'
#       + fdmod.waveplot('',par)) 


## ------------------------------------------------------------


#for si in range(ns):
for si in [75]:
##
  stag='%03d'%si
  sx = sx0 + si*ds
  fdmod.point('ss_',sx,sz,par)
  Flow('ss','ss_','put n2=1')

  Flow('Fdat'+stag+' Fwfl'+stag,'wav blkmod rhomod ss rr',
      '''
      awesgvxvzpp bulk=${SOURCES[1]} den=${SOURCES[2]} sou=${SOURCES[3]} 
      rec=${SOURCES[4]} wfl=${TARGETS[1]} free=y nb=50
      ''')

#### window data from the horizontal array
  Flow('datH'+stag,'Fdat'+stag,
       '''
       pad end3=%d |
       window squeeze=n n1=%d f3=%d j3=%d  |
       put o3=%g o1=%g d1=%g  | transp plane=13 | transp plane=23
       '''%(par['kt'],par['nrH'],par['kt'], par['drsmpt'],par['ot'],
            par['orH'], par['jrH']*par['dx']))
 
##  Result('datH'+stag,'window j2=4 | transp|'
##         + fdmod.dgrey('pclip=92'%par,par))
  
##ENDFOR { for si in range(ns):}

Flow('datPP'+stag,'datH'+stag,
    '''
    window n3=1 f3=0
    ''')
Flow('datVZ'+stag,'datH'+stag,
    '''
    window n3=1 f3=1
    ''')
Flow('datSc'+stag,'datPP'+stag+' datVZ'+stag,
     '''
     math vz=${SOURCES[1]} output='1/(vz*10000000)' |
     math pp=${SOURCES[0]} output='abs((input*pp))' | 
     nan2value 
     ''',stdin=0)
#  | clip clip=100000 | smooth rect1=5 rect2=5 

Flow('datDw'+stag,'datPP'+stag+' datVZ'+stag+' datSc'+stag,
     '''
     math pp=${SOURCES[0]} vz=${SOURCES[1]} weight=${SOURCES[2]} output='pp+10000000*vz*weight'
     ''',stdin=0)

#with open('datSc'+stag+'.rsf','rb') as f:
#  data = f.read()
#  print "%g"%float(data[0])
#  nan_flag = isnan(float(data))
#  data[nan_flag] = 0
#with open('datSc'+stag+'.rsf','wb') as f:
#  f.write(data)


# |  smooth rect1=10
# | clip clip=10000 value=0

#Result('wigH','datH','window j2=4 | transp|'
#       + fdmod.dwigl('pclip=98'%par,par))
#
# run FD migration
#fdmod.zom('imgH',  # image
#  'datH',  # data
#  'vstr',   # velocity
#  'dens',   # density
#  'rH',    # receiver coordinates
#  'fsrf=n', # optional flags
#  par)
    
#    # plot image
#Plot(  'imgH','bandpass flo=2 |'
#  + fdmod.cgrey('pclip=99',par))
    
#    # overlay sources and receivers
#Result('imgH',['imgH','ss','rH'],'Overlay')
    
## ------------------------------------------------------------
End()
