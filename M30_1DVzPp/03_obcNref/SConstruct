from rsf.proj import *
from rsf.recipes import fdmod
from math import *
import ast
from numpy import *

kilo = 1000
xmax = 12.0*kilo
zmax = 2.0*kilo
wbz = 0.20*kilo
layers = ((wbz,wbz,wbz,wbz),
          (0.45*kilo,0.45*kilo,0.45*kilo,0.45*kilo),
          (0.65*kilo,0.65*kilo,0.65*kilo,0.65*kilo),
          (0.85*kilo,0.85*kilo,0.85*kilo,0.85*kilo),
          (1.15*kilo,1.15*kilo,1.15*kilo,1.15*kilo),
          (1.35*kilo,1.35*kilo,1.35*kilo,1.35*kilo),
          (1.90*kilo,1.90*kilo,1.90*kilo,1.90*kilo))

velocities = (1.500*kilo,
              1.800*kilo,
              2.000*kilo,
              2.100*kilo,
              2.300*kilo,
              2.500*kilo,
              2.700*kilo,
              4.500*kilo)
densities = (1.000*kilo,
              2.000*kilo,
              2.100*kilo,
              2.200*kilo,
              2.100*kilo,
              2.300*kilo,
              2.300*kilo,
              2.400*kilo)
velocities_wb = (1.500*kilo,
              1.800*kilo,
              1.800*kilo,
              1.800*kilo,
              1.800*kilo,
              1.800*kilo,
              1.800*kilo)
densities_wb = (1.000*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo,
              2.000*kilo)
finame = ''
fband = [] 
def fband_dcomp(finame=finame, fband=fband):
  foname_fbi = []
  foname =finame+'fbandpass'
  for fbi in range(len(fband[1:])):
    fbi_tag = '%02d'%fbi
    foname_tmp = finame+'fbandpass'+fbi_tag
    Flow(foname_tmp,finame,
       '''
       $RSFROOT/bin/sfbandpass fhi=%g flo=%g 
       '''%(fband[fbi+1],fband[fbi]))
    foname_fbi.append(foname_tmp)

  Flow(foname,foname_fbi,
       '''
       cat ${SOURCES[1:%d]} | put label3='Freq band'
       '''%(len(foname_fbi)) )
  return foname
##########################################################
##nt = 100
##wdw_xn = 100
##wdw_x0 = 75
##wdw_tn = nt
##wdw_t0 = 10

nt = 400
wdw_xn = 300
wdw_x0 = 0
wdw_tn = nt
wdw_t0 = 0

def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

vstr = arr2str(velocities,',')
dstr = arr2str(densities,',')
vstr_wb = arr2str(velocities_wb,',')
dstr_wb = arr2str(densities_wb,',')

n1 = len(layers[0])
n2 = len(layers)

Flow('layers.asc',None,
     '''
     echo %s
     n1=%d n2=%d o1=0 d1=%g
     data_format=ascii_float in=$TARGET     
     ''' % (string.join(map(arr2str,layers),' '),
            n1,n2,xmax/(n1-1)))
Flow('layers','layers.asc','dd form=native')

d = 0.0075*kilo # non-round for reproducibility
nx = int(1.5+xmax/d)
nz = int(1.5+zmax/d)
Flow('refs','layers',
     '$RSFROOT/bin/sfspline o1=0 d1=%g n1=%d' % (d,nx))
Flow('dips','refs','deriv scale=y')

Flow('vpmod','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,vstr))
Flow('vpmod_wb','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,vstr_wb))

Flow('rhomod','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,dstr))
Flow('rhomod_wb','refs',
     '''
     $RSFROOT/bin/sfunif2 d1=%g n1=%d v00=%s 
     ''' % (d,nz,dstr_wb))

# rho [g/cm^3] , vel [km/s], 
Flow('blkmod','vpmod rhomod',
     '''
     math rho=${SOURCES[1]} output='rho*((input)^2)'
     ''')
Flow('blkmod_wb','vpmod_wb rhomod_wb',
     '''
     math rho=${SOURCES[1]} output='rho*((input)^2)'
     ''')

# ------------------------------------------------------------
par = dict( 
    nx=eval('%g'%(nx)), ox=0.0 ,dx=eval('%g'%(d)), lx='x',ux='m',
    nz=eval('%g'%(nz)), oz=0.0, dz=eval('%g'%(d)), lz='z',uz='m',
    nt=20001,ot=0.0, dt=0.0001, lt='t',ut='s',
    pclip=99.0,
    ratio=1.0,
    jsnap=5000,
    kt=800,
    nb=100,
    drsmpt=50
    )

# ------------------------------------------------------------
# set plotting parameters
fdmod.param(par)
# ------------------------------------------------------------

#Plot  ('vpmod',fdmod.cgrey('mean=y',par))
#Result('mod',fdmod.cgrey('mean=y',par))

ns = 151
nr = 301
ds = 0.02*kilo
dr_grid = 3
rx0 = 3.0*kilo 
rz0 = wbz
sx0 = 4.5*kilo
sz0 = 0.000*kilo
sz = sz0
rz = rz0

fdmod.horizontal('rr_all',rz,par)


## ------------------------------------------------------------
# horizontal array @ z=1.5km
##fdmod.horizontal('tH',rz0,par)
par['jrH']=dr_grid   # jump (grid points)
par['orH']=rx0 # origin
par['nrH']=nr   # number
##
### window array
Flow('rr','rr_all',
  'window j2=%d min2=%g n2=%d'%
  (par['jrH'],  # jump
   par['orH'],  # origin
   par['nrH'])) # number
##    
##    # plot array
##Plot(  'rH',fdmod.rrplot('',par))
##    
##
## ------------------------------------------------------------
## make smooth velocity
#Flow('vsmo','modl',
#     'smooth rect1=25 rect2=25 repeat=3')
## ------------------------------------------------------------

# construct wavelet
fdmod.wavelet('wav_',30,par) 

# transpose wavelet
Flow(  'wav','wav_','put n2=1 n3=1 | transp plane=13 | pad end2=2')      


# plot wavelet
#Result('wav','window n2=4000 |'
#       + fdmod.waveplot('',par)) 


## ------------------------------------------------------------


#for si in range(ns):
for si in [75]:
####
  stag='%03d'%si
  sx = sx0 + si*ds
  fdmod.point('ss_'+stag,sx,sz,par)
  Flow('ss'+stag,'ss_'+stag,'put n2=1')

  Flow('Fdat'+stag+' Fwfl'+stag,'wav blkmod rhomod ss'+stag+' rr',
      '''
      awesgvxvzpp bulk=${SOURCES[1]} den=${SOURCES[2]} sou=${SOURCES[3]} 
      rec=${SOURCES[4]} wfl=${TARGETS[1]} free=y nb=%d abc=y
      '''%(par['nb']))
  Flow('Fdat_nfs'+stag+' Fwfl_nfs'+stag,'wav blkmod rhomod ss'+stag+' rr',
      '''
      awesgvxvzpp bulk=${SOURCES[1]} den=${SOURCES[2]} sou=${SOURCES[3]} 
      rec=${SOURCES[4]} wfl=${TARGETS[1]} free=n nb=%d abc=y
      '''%(par['nb']))

  Flow('Fdat_wb'+stag+' Fwfl_wb'+stag,'wav blkmod_wb rhomod_wb ss'+stag+' rr',
      '''
      awesgvxvzpp bulk=${SOURCES[1]} den=${SOURCES[2]} sou=${SOURCES[3]} 
      rec=${SOURCES[4]} wfl=${TARGETS[1]} free=y nb=%d abc=y
      '''%(par['nb']))

#### window data from the horizontal array
  Flow('datH'+stag,'Fdat'+stag,
       '''
       pad end3=%d |
       window squeeze=n n1=%d f3=%d j3=%d  |
       put o3=%g o1=%g d1=%g  | transp plane=13 | transp plane=23
       '''%(par['kt'],par['nrH'],par['kt'], par['drsmpt'],par['ot'],
            par['orH'], par['jrH']*par['dx']))
  Flow('datH_wb'+stag,'Fdat_wb'+stag,
       '''
       pad end3=%d |
       window squeeze=n n1=%d f3=%d j3=%d  |
       put o3=%g o1=%g d1=%g  | transp plane=13 | transp plane=23
       '''%(par['kt'],par['nrH'],par['kt'], par['drsmpt'],par['ot'],
            par['orH'], par['jrH']*par['dx']))
  Flow('datH_nfs'+stag,'Fdat_nfs'+stag,
       '''
       pad end3=%d |
       window squeeze=n n1=%d f3=%d j3=%d  |
       put o3=%g o1=%g d1=%g  | transp plane=13 | transp plane=23
       '''%(par['kt'],par['nrH'],par['kt'], par['drsmpt'],par['ot'],
            par['orH'], par['jrH']*par['dx']))

##  Result('datH'+stag,'window j2=4 | transp|'
##         + fdmod.dgrey('pclip=92'%par,par))


  Flow('datPP'+stag,'datH'+stag,
      '''
      window n3=1 f3=0
      ''')
  Flow('datPP_wb'+stag,'datH_wb'+stag,
      '''
      window n3=1 f3=0
      ''')
  Flow('datPP_nfs'+stag,'datH_nfs'+stag,
      '''
      window n3=1 f3=0
      ''')
  
  Flow('datVZ'+stag,'datH'+stag,
      '''
      window n3=1 f3=1
      ''')
  Flow('datVZ_wb'+stag,'datH_wb'+stag,
      '''
      window n3=1 f3=1
      ''')
  Flow('datVZ_nfs'+stag,'datH_nfs'+stag,
      '''
      window n3=1 f3=1
      ''')
  
  Flow('datVZ_wdw'+stag,'datVZ'+stag+' datVZ_wb'+stag,
       '''
       add scale=1.0,-1.0 ${SOURCES[1]} | window n2=%d f2=%d n1=%d f1=%d | costaper nw2=10 nw1=10 
       '''%(wdw_xn, wdw_x0, wdw_tn, wdw_t0))
  Flow('datPP_wdw'+stag,'datPP'+stag+' datPP_wb'+stag,
       '''
        add scale=1.0,-1.0 ${SOURCES[1]} | window n2=%d f2=%d n1=%d f1=%d | costaper nw1=10 nw2=10
       '''%(wdw_xn, wdw_x0, wdw_tn, wdw_t0))
  Flow('datVZ_bpass_wdw'+stag,'datVZ_wdw'+stag,
        '''
        $RSFROOT/bin/sfbandpass fhi=60 flo=0.5 
        ''')
  Flow('datPP_bpass_wdw'+stag,'datPP_wdw'+stag,
        '''
        $RSFROOT/bin/sfbandpass fhi=60 flo=0.5 
        ''')
  
  eps_ratPPVZ = .0001
  
  #fband = [20,30]
  fband = [0,35,70,99]
  
  datPP_bpass = 'datPP_bpass_wdw'+stag
  datPP_fbi = fband_dcomp(finame=datPP_bpass, fband=fband)
  
  datPP_envelope = datPP_fbi+'_envelope' 
  Flow(datPP_envelope,datPP_fbi,'$RSFROOT/bin/sfenvelope')
  
  PPVZ_mag_ord = 1000000.0
  nax3 = len(fband)-1
  
  for nax3i in range (nax3):
    nax3i_tag = '%02d'%nax3i
    datPP_envelope_tmp = datPP_envelope+'_tmp'+nax3i_tag
    
    Flow(datPP_envelope_tmp,datPP_envelope,
         '''
         window n3=1 f3=%d
         '''%(nax3i))
  
  datPPUp_stk_psi = []
  datPPDw_stk_psi = []
  
#  for phsh_i in range(90):
  for phsh_i in [30]:

    phsh_itag = '%03d'%(phsh_i)
    phsh = (phsh_i*2.0*math.pi)/(2.0*45.0)
    phsh_re = math.cos(phsh-math.pi*0.5)
    phsh_im = math.sin(phsh-math.pi*0.5)
    foname_phsh =  'datVZ_bpass_p%s_wdw'%(phsh_itag)+stag
    finame_phsh =  'datVZ_bpass_wdw'+stag
    Flow(foname_phsh,finame_phsh,
         '''
         fft1 |
         math output='(%g+I*%g)*(real(input)+imag(input))' | 
         fft1 inv=y 
         '''%(phsh_re,phsh_im))
    ## Frequency band decomposition
    
    datVZ_bpass = foname_phsh
    datVZ_fbi = fband_dcomp(finame=datVZ_bpass, fband=fband)
    
    ## Envelope computation
    
    datVZ_envelope = datVZ_fbi+'_envelope' 
    Flow(datVZ_envelope,datVZ_fbi,'$RSFROOT/bin/sfenvelope')
    
    ## PP/VZ Envelope Ratio
    
    
    datPPVZ_ratio = datVZ_fbi+'_PPVZ_ratio'
    datPPVZ_ratio_nax3i = []
    datVZSc_fbi_nax3i = []
    datVZSc_fbi = datVZ_fbi+'_Sc'
    for nax3i in range (nax3):
      nax3i_tag = '%02d'%nax3i
      datVZ_fbi_tmp = datVZ_fbi+'_tmp'+nax3i_tag
      datPP_envelope_tmp = datPP_envelope+'_tmp'+nax3i_tag
  
      Flow(datPPVZ_ratio+nax3i_tag,datVZ_envelope+' '+datPP_envelope_tmp,
           '''
           window n3=1 f3=%d | math output='1/(input*%g+%g)' |
           math pp=${SOURCES[1]} output='(input*pp)' 
           '''%(nax3i,PPVZ_mag_ord,eps_ratPPVZ))
      datPPVZ_ratio_nax3i.append(datPPVZ_ratio+nax3i_tag)
  #          clip clip=%g value=0.0 | 
   
      Flow(datVZ_fbi_tmp,datVZ_fbi,
           '''
           window n3=1 f3=%d
           '''%(nax3i))
      Flow(datVZSc_fbi+nax3i_tag,datPPVZ_ratio+nax3i_tag+' '+datVZ_fbi_tmp,
           '''
           math vz=${SOURCES[1]} output='1*%g*input*vz'
           '''%(PPVZ_mag_ord))
      datVZSc_fbi_nax3i.append(datVZSc_fbi+nax3i_tag)
    
    ##ENDLOOP{for nax3i in range (nax3):}
    Flow(datPPVZ_ratio,datPPVZ_ratio_nax3i,
         '''
         cat ${SOURCES[1:%d]}
         '''%(len(datPPVZ_ratio_nax3i)) )
    Flow(datVZSc_fbi,datVZSc_fbi_nax3i,
         '''
         cat ${SOURCES[1:%d]} | put o3=0
         '''%(len(datVZSc_fbi_nax3i)) )
    
    datPPUp_fbi = 'datPPUp_fbi_wdw'+stag+'_ps%s'%(phsh_itag)
    datPPDw_fbi = 'datPPDw_fbi_wdw'+stag+'_ps%s'%(phsh_itag)
    datPPUp_stk_1t = datPPUp_fbi+'_1t'
    datPPDw_stk_1t = datPPDw_fbi+'_1t'
    Flow(datPPUp_fbi,datPP_fbi+' '+datVZSc_fbi,'add scale=0.5,0.5 ${SOURCES[1]}')
    Flow(datPPDw_fbi,datPP_fbi+' '+datVZSc_fbi,'add scale=0.5,-0.5 ${SOURCES[1]}')
    Flow(datPPUp_stk_1t,datPPUp_fbi,'stack axis=3 norm=n | window n2=1 f2=75')
    Flow(datPPDw_stk_1t,datPPDw_fbi,'stack axis=3 norm=n | window n2=1 f2=75')
    datPPUp_stk_psi.append(datPPUp_stk_1t)
    datPPDw_stk_psi.append(datPPDw_stk_1t)
  
  ##ENDLOOP{for phsh_i in range(16):}
  
  Flow('datPPUp_stk_psi'+stag,datPPUp_stk_psi,'cat ${SOURCES[1:%d]} | transp plane=32 | put o2=0 d2=1'%len(datPPUp_stk_psi))
  Flow('datPPDw_stk_psi'+stag,datPPDw_stk_psi,'cat ${SOURCES[1:%d]} | transp plane=32 | put o2=0 d2=1'%len(datPPDw_stk_psi))
  
  Flow('datPP_PP_fbi'+stag,datPP_fbi+' '+datPP_bpass,'stack axis=3 norm=n | add scale=1,-1 ${SOURCES[1]}')
  #Flow('datPP_PP_fbi',datPP_fbi+' '+datPP_bpass,'add scale=1,-1 ${SOURCES[1]}')
  Flow('datVZ_VZ_fbi'+stag,datVZ_fbi+' '+datVZ_bpass,'stack axis=3 norm=n | add scale=1,-1 ${SOURCES[1]}')

##ENDFOR { for si in range(ns):}

##### Redatum multiples to primaries
sp_taper = 5
timepad = nt
nrx = 32
si_ref = 75
stag_in='%03d'%si_ref
datPPDw_fbi_in = 'datPPDw_fbi_wdw'+stag_in+'_ps%s'%(phsh_itag)
datPP_xcr = [] 
rx_zoff = 133
Flow('datPPDw_pad'+stag_in,datPPDw_fbi_in,
  '''
   stack axis=3 norm=n | pad end2=1 end1=1 | window f2=%d n2=%d |  costaper nw2=%d | pad beg2=%d end2=%d
  '''%(rx_zoff-nrx,nrx*2,sp_taper,rx_zoff-nrx,nr-rx_zoff-nrx))

for rxi in range (nrx*2+1):
#for rxi in [0,32,64]:
  trc_tag = '%03d'%rxi
  if rxi < nrx+1:
    Flow('datPP_wb_rev'+stag_in+'t'+trc_tag,'datPP_wb'+stag_in,
        '''
        costaper nw2=%d | window n2=%d f2=%d | pad end2=%d | reverse which=1 opt=n | put o2=%g
        '''%(sp_taper,nr-(nrx-rxi),nrx-rxi,nrx-rxi,rx0))
  else:
    Flow('datPP_wb_rev'+stag_in+'t'+trc_tag,'datPP_wb'+stag_in,
        '''
       costaper nw2=%d | window n2=%d f2=0 | pad beg2=%d | reverse which=1 opt=n | put o2=%g
        '''%(sp_taper,nr-(rxi-nrx),rxi-nrx,rx0))

  Flow('datPP_xcr'+stag_in+'t'+trc_tag,'datPPDw_pad'+stag_in+' datPP_wb_rev'+stag_in+'t'+trc_tag,
      '''
      $RSFROOT/bin/sfconv filt=${SOURCES[0]} < ${SOURCES[1]} each=y trans=y | window min1=0 | stack axis=2 norm=y
      ''',stdin=0)
  datPP_xcr.append('datPP_xcr'+stag_in+'t'+trc_tag)
##ENDLOOP{for rxi in range (nrx*2+1):}
#      $RSFROOT/bin/sfconvolve2 flt=${SOURCES[0]} < ${SOURCES[1]} | window min1=0.0 | stack axis=2 norm=n 

Flow('datPP_xcr'+stag_in,datPP_xcr,
  '''
  cat ${SOURCES[1:%d]} | window
  '''%(len(datPP_xcr)))

######## Create N shots from 1D shot
#sx0 = sx0 
#rx0 = rx0
drx = 0.0225*kilo
dsx= ds
mig_dsx= 0.0225*kilo
nrxi0 = int((sx0+si_ref*dsx-(rx0+nrx*drx))/drx)
phsh = 30
#stag_in='%03d'%si_ref
phsh_itag = '%03d'%phsh
datPPDw_fbi_in = 'datPPDw_fbi_wdw'+stag_in+'_ps%s'%(phsh_itag)
datPPUp_fbi_in = 'datPPUp_fbi_wdw'+stag_in+'_ps%s'%(phsh_itag)

datPP_nfs_in = 'datPP_nfs'+stag_in
datPP_xcr_in = 'datPP_xcr'+stag_in

datPP_nfs_shof = []
datPP_xcr_shof = []
datPPDw_shof = []
datPPUp_shof = []

mig_ns = 134

mig_noff = nrx*2 + 1

for si in range(mig_ns):
#for si in [0,75,150]:
####
  stag='%03d'%si
  sx = sx0 + si*mig_dsx
  nrxi = int((sx-rx0-nrx*drx)/drx)
  rx0_out = rx0+nrxi*drx
  datPPDw_fbi_out = 'datPPDw_s'+stag
  datPPUp_fbi_out = 'datPPUp_s'+stag
  datPP_nfs_out = 'datPP_nfs_s'+stag
  datPP_xcr_out = 'datPP_xcr_s'+stag

  Flow(datPPDw_fbi_out,datPPDw_fbi_in,
  '''
  stack axis=3 norm=n | 
  window f2=%d n2=%d |
  costaper nw1=10 nw2=10 |
  put o2=%g
  '''%(nrxi0,nrx*2+1,rx0_out))
  Flow(datPPUp_fbi_out,datPPUp_fbi_in,
  '''
  stack axis=3 norm=n | 
  window f2=%d n2=%d |
  costaper nw1=10 nw2=10 |
  put o2=%g
  '''%(nrxi0,nrx*2+1,rx0_out))

  Flow(datPP_xcr_out,datPP_xcr_in,
  '''
  costaper nw1=10 nw2=10 |
  put o2=%g
  '''%(rx0_out))
  Flow(datPP_nfs_out,datPP_nfs_in,
  '''
  window f2=%d n2=%d |
  costaper nw1=10 nw2=10 |
  put o2=%g 
  '''%(nrxi0,nrx*2+1,rx0_out))
  datPP_nfs_shof.append(datPP_nfs_out)
  datPP_xcr_shof.append(datPP_xcr_out)
  datPPDw_shof.append(datPPDw_fbi_out)

 
##ENDLOOP{for si in range(ns):}

########## Migration

Flow('datPP_nfs_shof',datPP_nfs_shof,
  '''
  cat ${SOURCES[1:%d]} |
  put n3=%d o3=%g d3=%g n2=%d o2=%g d2=%g
  unit1=s unit2=m unit3=m label1="Time" label2="Offset" label3="SouPosition" 
  '''%(len(datPP_nfs_shof),mig_ns,sx0,mig_dsx,mig_noff,-drx*nrx,drx))
Flow('datPPDw_shof',datPPDw_shof,
  '''
  cat ${SOURCES[1:%d]} |
  put n3=%d o3=%g d3=%g n2=%d o2=%g d2=%g
  unit1=s unit2=m unit3=m label1="Time" label2="Offset" label3="SouPosition" 
  '''%(len(datPP_nfs_shof),mig_ns,sx0,mig_dsx,mig_noff,-drx*nrx,drx))

Flow('datPP_xcr_shof',datPP_xcr_shof,
  '''
  cat ${SOURCES[1:%d]} |
  put n3=%d o3=%g d3=%g n2=%d o2=%g d2=%g
  unit1=s unit2=m unit3=m label1="Time" label2="Offset" label3="SouPosition" 
  '''%(len(datPP_nfs_shof),mig_ns,sx0,mig_dsx,mig_noff,-drx*nrx,drx))


mig_dz=7.500
mig_dx=7.500


Flow('xs',None,'math n1=%d o1=%g d1=%g output=x1' % (mig_ns,sx0,mig_dsx))
Flow('zs','xs','math output=%g' % (sz0))
Flow('ys','xs','math output=0')
Flow('scoord','zs xs ys','cat axis=2 ${SOURCES[1]} ${SOURCES[2]} | transp')

Flow('xr',None,'math n1=%d o1=%g d1=%g output=x1' % (nr,rx0,drx))
Flow('zr','xr','math output=%g' % (rz0))
Flow('yr','xr','math output=0')
Flow('rcoord','zr xr yr','cat axis=2 ${SOURCES[1]} ${SOURCES[2]} | transp')


Flow('vpmodsmth','vpmod','smooth rect1=10 rect2=10 repeat=2 | put n3=1')
Flow('time0s tdl0s tds0s','vpmodsmth scoord',
     '''
     put d3=%g o3=.0 label3= unit3= |
     $RSFROOT/bin/sfeikods shotfile=${SOURCES[1]} tdl1=${TARGETS[1]} tds1=${TARGETS[2]} b1=2 b2=2 |
     put o4=%g d4=%g | window 
     ''' % (mig_dx,sx0,mig_dsx))
Flow('time0r tdl0r tds0r','vpmodsmth rcoord',
     '''
     put d3=%g o3=0. label3= unit3= |
     $RSFROOT/bin/sfeikods shotfile=${SOURCES[1]} tdl1=${TARGETS[1]} tds1=${TARGETS[2]} b1=2 b2=2 |
     put o4=%g d4=%g | window
     ''' % (mig_dx,rx0,drx))

Flow('dmig_nfs','datPP_nfs_shof time0s tds0s time0r tds0r',
     '''
     window n2=%d n3=%d j3=1 f2=0 f3=0  | 
     $RSFROOT/bin/sfkirmigsr aperture=45.0 tau=0.0 cmp=y 
     stable=${SOURCES[1]} sderiv=${SOURCES[2]} 
     rtable=${SOURCES[3]} rderiv=${SOURCES[4]} |
     $RSFROOT/bin/sfhalfint adj=y inv=y
     '''%(mig_noff,mig_ns))
Flow('dmig_PPDw','datPPDw_shof time0s tds0s time0r tds0r',
     '''
     window n2=%d n3=%d j3=1 f2=0 f3=0  | 
     $RSFROOT/bin/sfkirmigsr aperture=45.0 tau=0.0 cmp=y 
     stable=${SOURCES[1]} sderiv=${SOURCES[2]} 
     rtable=${SOURCES[3]} rderiv=${SOURCES[4]} |
     $RSFROOT/bin/sfhalfint adj=y inv=y
     '''%(mig_noff,mig_ns))

Flow('dmig_xcr','datPP_xcr_shof time0s tds0s time0s tds0s',
     '''
     window n2=%d n3=%d j3=1 f2=0 f3=0  | 
     $RSFROOT/bin/sfkirmigsr aperture=45.0 tau=0.0 cmp=y 
     stable=${SOURCES[1]} sderiv=${SOURCES[2]} 
     rtable=${SOURCES[3]} rderiv=${SOURCES[4]} |
     $RSFROOT/bin/sfhalfint adj=y inv=y
     '''%(mig_noff,mig_ns))




## Match filter
##nt=400
##Flow('lag.asc',None,
##     '''
##     echo %d n1=1 n=%d,100 data_format=ascii_int in=$TARGET
##     ''' % (nt,nt))
##Flow('lag','lag.asc','dd form=native')
##
##Flow('pef.asc','lag',
##     '''
##     echo 1 a0=1 n1=1 data_format=ascii_float in=$TARGET
##     lag=$SOURCE
##     ''',stdin=0)
##Flow('pef','pef.asc','dd form=native')
##
##shifts = []
##datVZSc_stack = 'datVZSc_stack_wdw'+stag
##datVZSc_fbi = 'datVZ_bpass_p090_wdw075fbandpass_Sc' 
##Flow(datVZSc_stack,datVZSc_fbi,'stack axis=3 norm=n')
##nshifts = 3
##for s in range(0,nshifts):
##  shift = 'shift+%02d' % s
##  Flow(shift,datVZSc_stack,
##       'window n1=%d | pad beg1=%d | put o1=%g' % (nt-nshifts,nshifts,0.005*wdw_t0))
##  shifts.append(shift)
##shifts.append(datVZSc_stack)
##for s in range(nshifts+1,nshifts*2+1):
##  shift = 'shift+%02d' % s
##  Flow(shift,datVZSc_stack,
##       'window n1=%d | pad end1=%d | put o1=%g' % (nt-nshifts,nshifts,0.005*wdw_t0))
##  shifts.append(shift)
##
##Flow('shifts',shifts,'cat ${SOURCES[1:%d]}' % len(shifts))
##datVZSc_lpf = 'datVZSc_lpf_wdw'+stag
##Flow('filt '+datVZSc_lpf,'shifts '+datPP_bpass+' pef',
##     '''
##     lpf match=${SOURCES[1]} rect1=3 rect2=3 niter=400
##     pred=${TARGETS[1]} pef=${SOURCES[2]}
##     ''')
##datPPUp_lpf = 'datPPUp_lpf_wdw'+stag
##datPPDw_lpf = 'datPPDw_lpf_wdw'+stag
##
##Flow(datPPUp_lpf,datPP_bpass+' '+datVZSc_lpf,'add scale=0.5,0.5 ${SOURCES[1]}')
##Flow(datPPDw_lpf,datPP_bpass+' '+datVZSc_lpf,'add scale=0.5,-0.5 ${SOURCES[1]}')

### Match filter over Migration
mig_nz = 268 
Flow('lag.asc',None,
     '''
     echo %d n1=1 n=%d,100 data_format=ascii_int in=$TARGET
     ''' % (mig_nz,mig_nz))
Flow('lag','lag.asc','dd form=native')

Flow('pef.asc','lag',
     '''
     echo -1 a0=1 n1=1 data_format=ascii_float in=$TARGET
     lag=$SOURCE
     ''',stdin=0)
Flow('pef','pef.asc','dd form=native')
finame_match = 'dmig_xcr_wdw'
Flow(finame_match,'dmig_xcr',
     '''
     window n2=400 f2=600 
     ''')
dmig_xcr_p_PPDw = []
dmig_xcr_m_PPDw = []

for phsh_i in range(90):
##for phsh_i in [30]:

  phsh_itag = '%03d'%(phsh_i)
  phsh = (phsh_i*math.pi)/(45.0)
  phsh_re = math.cos(phsh-math.pi*0.5)
  phsh_im = math.sin(phsh-math.pi*0.5)
  foname_phsh =  'dmig_PPDw_p%s'%(phsh_itag)
  finame_phsh =  'dmig_PPDw'
  Flow(foname_phsh,finame_phsh,
       '''
       window n2=400 f2=600 | 
       fft1 |
       math output='(%g+I*%g)*(real(input)+imag(input))' | 
       fft1 inv=y 
       '''%(phsh_re,phsh_im))

  shifts = []
  finame_lpf = foname_phsh
  nshifts = 5
  for s in range(0,nshifts):
    shift = 'shift+%02d_ps'%(s)+phsh_itag
    Flow(shift,finame_lpf,
         'window n1=%d | pad beg1=%d | put o1=%g' % (mig_nz-nshifts,nshifts,0.000*0))
    shifts.append(shift)
  shifts.append(finame_lpf)
  for s in range(nshifts+1,nshifts*2+1):
    shift = 'shift+%02d'%(s)+phsh_itag
    Flow(shift,finame_lpf,
         'window n1=%d | pad end1=%d | put o1=%g' % (mig_nz-nshifts,nshifts,0.000*0))
    shifts.append(shift)

  Flow('shifts_ps'+phsh_itag,shifts,'cat ${SOURCES[1:%d]}' % len(shifts))
  foname_lpf = 'dmig_xcr_PPDw_lpf_ps'+phsh_itag
  filt_lpf = 'filt_ps'+phsh_itag
  Flow(filt_lpf+' '+foname_lpf,'shifts_ps'+phsh_itag+' '+finame_match+' pef',
       '''
       lpf match=${SOURCES[1]} rect1=3 rect2=3 niter=400
       pred=${TARGETS[1]} pef=${SOURCES[2]}
       ''')
  dmig_xcr_p_PPDw_lpf = 'dmig_xcr_p_PPDw_lpf_ps'+phsh_itag
  dmig_xcr_m_PPDw_lpf = 'dmig_xcr_m_PPDw_lpf_ps'+phsh_itag

  Flow(dmig_xcr_p_PPDw_lpf,finame_match+' '+foname_lpf,'add scale=1.0,1.0 ${SOURCES[1]}')
  Flow(dmig_xcr_m_PPDw_lpf,finame_match+' '+foname_lpf,'add scale=1.0,-1.0 ${SOURCES[1]}')
  dmig_xcr_p_PPDw.append(dmig_xcr_p_PPDw_lpf)
  dmig_xcr_m_PPDw.append(dmig_xcr_m_PPDw_lpf)

##ENDLOOP{for phsh_i in range(90):}
Flow('dmig_xcr_p_PPDw',dmig_xcr_p_PPDw,
     '''
     cat ${SOURCES[1:%d]} | put o3=0 d3=4.0
     '''%(len(dmig_xcr_p_PPDw)))
Flow('dmig_xcr_m_PPDw',dmig_xcr_m_PPDw,
     '''
     cat ${SOURCES[1:%d]} | put o3=0 d3=4.0
     '''%(len(dmig_xcr_m_PPDw)))

###


###### SEGY write Phase test
##
##
##segy_finame = 'datPP_bpass_wdw'+stag
##segy_foname = 'segy_'+segy_finame
##segy_foname_trcl = 'trcl_'+segy_foname
##segy_foname_tfile = 'tfile_'+segy_foname
##
##Flow(segy_foname_trcl,segy_finame,
##      '''
##      < ${SOURCE} $RSFROOT/bin/sfheadermath output=N+1 | sfdd type=int \r 
##      ''',stdin=0)
##
##Flow(segy_foname_tfile,segy_finame+' '+segy_foname_trcl,
##      '''
##      < ${SOURCES[0]} $RSFROOT/bin/sfsegyheader tracl=${SOURCES[1]} \r
##      ''',stdin=0)
##Flow(segy_foname+'.segy',segy_finame+' '+segy_foname_tfile,
##      '''
##      < ${SOURCES[0]} $RSFROOT/bin/sfsegywrite tfile=${SOURCES[1]}
##      ''',stdin=0)
##ph = 45
##segy_finame = 'test_%ddeg.segy'%ph
##segy_foname = 'datPP_bpass_fp%d_wdw'%(ph)+stag
##Flow(segy_foname,segy_finame,
##      '''
##      < ${SOURCES[0]} $RSFROOT/bin/sfsegyread tfile=tfile.rsf hfile=hfile bfile=bfile endian=1
##      ''',stdin=0)
##ph = 90
##segy_finame = 'test_%ddeg.segy'%ph
##segy_foname = 'datPP_bpass_fp%d_wdw'%(ph)+stag
##Flow(segy_foname,segy_finame,
##      '''
##      < ${SOURCES[0]} $RSFROOT/bin/sfsegyread tfile=tfile.rsf hfile=hfile bfile=bfile endian=1
##      ''',stdin=0)
##
#################3

End()
